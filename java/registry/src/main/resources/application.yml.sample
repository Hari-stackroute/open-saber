spring:
  profiles.active: dev
---
##################################################################
#                      DEVELOPMENT PROFILE                       #
##################################################################
spring:
  profiles: dev
  output:
    ansi:
      enabled: ALWAYS
name: dev-yaml
enviroment: development

perf:
  monitoring:
    enabled: false

registry:
  context:
    base: http://localhost:8080/
  system:
    base: http://example.com/voc/opensaber/

# IRI of the datatype of the records issued/stored in registry, for e.g if namespace of the
# teacher registry is http://example.com/voc/teacher/1.0.0/ and type is
# Teacher, then configure this field as
# http://example.com/voc/teacher/1.0.0/Teacher
subject:
  label:
    type: http://example.com/voc/teacher/1.0.0/Teacher

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: schema-configuration.jsonld

database:
  provider: NEO4J
  embedded: false
  # Set an environment variable NEO4J_HOST if running Neo4J as a standalone host
  # This variable is set from the docker-compose.yml with the Neo4J service name
  host: localhost
  port: 7687
  neo4j-directory: /data/databases/graph.db
  neo4j-profiler-enabled: false

# RDF Validation Config
validations:
  create:
    file: validations_create.shex
  update:
    file: validations_update.shex

# Http Connection Timeout Config
connection:
  timeout: 5000
  request:
    timeout: 5000
read:
  timeout: 5000

encryption:
  base: https://dev.open-sunbird.org/encryption/
  uri: https://dev.open-sunbird.org/encryption/encrypt
  batch:
    uri: https://dev.open-sunbird.org/encryption/encrypt/obj

decryption:
  uri: https://dev.open-sunbird.org/encryption/decrypt
  batch:
    uri: https://dev.open-sunbird.org/encryption/decrypt/obj

audit:
  enabled: false

authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}
    username: ${sunbird_sso_username}
    password: ${sunbird_sso_password}
    clientId: ${sunbird_sso_client_id}

---
##################################################################
#                      STAGING PROFILE                           #
##################################################################
spring:
  profiles: staging
  output:
    ansi:
      enabled: ALWAYS
name: staging-yaml
enviroment: staging

perf:
  monitoring:
    enabled: false

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/

# IRI of the datatype of the records issued/stored in registry, for e.g if namespace of the
# teacher registry is http://example.com/voc/teacher/1.0.0/ and type is
# Teacher, then configure this field as
# http://example.com/voc/teacher/1.0.0/Teacher
subject:
  label:
    type: http://example.com/voc/teacher/1.0.0/Teacher

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: schema-configuration.jsonld

database:
  provider: NEO4J
  embedded: false
  # Set an environment variable NEO4J_HOST if running Neo4J as a standalone host
  # This variable is set from the docker-compose.yml with the Neo4J service name
  host: localhost
  port: 7687
  neo4j-directory: /data/databases/graph.db
  neo4j-profiler-enabled: false

# RDF Validation Config
validations:
  create:
    file: validations_create.shex
  update:
    file: validations_update.shex

# Http Connection Timeout Config
connection:
  timeout: 5000
  request:
    timeout: 5000
read:
  timeout: 5000

encryption:
  base: https://staging.open-sunbird.org/encryption/
  uri: https://staging.open-sunbird.org/encryption/encrypt
  batch:
    uri: https://staging.open-sunbird.org/encryption/encrypt/obj

decryption:
  uri: https://staging.open-sunbird.org/encryption/decrypt
  batch:
    uri: https://staging.open-sunbird.org/encryption/decrypt/obj

audit:
  enabled: false

authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}
    username: ${sunbird_sso_username}
    password: ${sunbird_sso_password}
    clientId: ${sunbird_sso_client_id}

---
##################################################################
#                      TEST PROFILE                              #
##################################################################
spring:
  profiles: test
  output:
    ansi:
      enabled: ALWAYS
name: test-yaml
enviroment: test

perf:
  monitoring:
    enabled: false

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/

subject:
  label:
    type: http://example.com/voc/teacher/1.0.0/School

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: schema-configuration-school-test.jsonld

database:
  provider: TINKERGRAPH

# RDF Validation Config
validations:
  create:
    file: good1.shex
  update:
    file: good1.shex

# Http Connection Timeout Config
connection:
  timeout: 5000
  request:
    timeout: 5000
read:
  timeout: 5000

encryption:
  base: https://dev.open-sunbird.org/encryption/
  uri: https://dev.open-sunbird.org/encryption/encrypt
  batch:
    uri: https://dev.open-sunbird.org/encryption/encrypt/obj

decryption:
  uri: https://dev.open-sunbird.org/encryption/decrypt
  batch:
    uri: https://dev.open-sunbird.org/encryption/decrypt/obj

audit:
  enabled: false

authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}
    username: ${sunbird_sso_username}
    password: ${sunbird_sso_password}
    clientId: ${sunbird_sso_client_id}
